import { ChatGPTAPI } from 'chatgpt';
import {
    Client,
    GatewayIntentBits,
    REST,
    Routes,
    SlashCommandBuilder
} from 'discord.js';

import * as dotenv from 'dotenv';
dotenv.config();

const { BOT_TOKEN, CLIENT_ID, OPENAI_KEY } = process.env;

// Create a slash command for talking to ChatGPT.
const askCommand = new SlashCommandBuilder()
    .setName('ask')
    .setDescription('Ask ChatGPT a question')
    .addStringOption((option) =>
        option
            .setName('question')
            .setDescription('Ask ChatGPT a question')
            .setRequired(true)
    );

// Respond to prompts from the user with answers generated by ChatGPT.
const askHandler = async (interaction) => {
    try {
        await interaction.deferReply();
        const question = interaction.options.getString('question');
        const response = await chatGPT.sendMessage(question);
        await interaction.editReply(response.text);
    } catch (e) {
        console.error(`[!] Encountered an error: ${e}`);
    }
}

// Register the slash command with the Discord API.
const rest = new REST({ version: '10' }).setToken(BOT_TOKEN);
await rest.put(Routes.applicationCommands(CLIENT_ID), { body: [askCommand.toJSON()] });

// Create clients for both the discord bot and ChatGPT APIs.
const bot     = new Client({ intents: [GatewayIntentBits.Guilds] });
const chatGPT = new ChatGPTAPI({ apiKey: OPENAI_KEY });

// Log once the bot finishes connecting.
bot.on('ready', () => console.info("[+] Bot online"));

// Handle user slash commands.
bot.on('interactionCreate', async (interaction) => {
    if (interaction.isChatInputCommand())
        askHandler(interaction);

    console.info(`[*] Responded to prompt`);
});

// Connect the bot and respond to prompts.
bot.login(BOT_TOKEN);
